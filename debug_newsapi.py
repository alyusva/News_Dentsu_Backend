#!/usr/bin/env python3
"""
Script para debuggear qu√© art√≠culos est√°n llegando realmente del NewsAPI
"""
import os
import httpx
import json
from datetime import datetime, timedelta

def fetch_real_news():
    """Obtener noticias reales del NewsAPI como lo hace el agente"""
    
    api_key = os.getenv("NEWS_API_KEY")
    if not api_key:
        print("‚ùå NEWS_API_KEY no encontrada")
        return
    
    # Los mismos queries que usa el agente
    queries = [
        "artificial intelligence OR machine learning OR AI technology OR automation OR neural networks OR deep learning",
        "digital marketing OR social media marketing OR content marketing OR brand strategy OR advertising technology",
        "AI marketing OR marketing automation OR personalization technology OR customer analytics OR programmatic advertising"
    ]
    
    # Fecha desde hace 7 d√≠as
    from_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    
    all_articles = []
    
    for i, query in enumerate(queries, 1):
        print(f"\nüîç CONSULTA {i}: {query[:50]}...")
        
        url = "https://newsapi.org/v2/everything"
        params = {
            'q': query,
            'language': 'en',
            'sortBy': 'relevancy',
            'from': from_date,
            'pageSize': 10,  # Solo los primeros 10 por query
            'apiKey': api_key
        }
        
        try:
            response = httpx.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                articles = data.get('articles', [])
                print(f"üì∞ Encontrados: {len(articles)} art√≠culos")
                
                for j, article in enumerate(articles[:5], 1):  # Solo mostrar los primeros 5
                    print(f"\n   üìÑ ART√çCULO {j}:")
                    print(f"   üì∞ T√≠tulo: {article.get('title', 'Sin t√≠tulo')[:100]}")
                    print(f"   üìù Descripci√≥n: {article.get('description', 'Sin descripci√≥n')[:150]}")
                    print(f"   üè¢ Fuente: {article.get('source', {}).get('name', 'Desconocida')}")
                    
                    # Verificar si tiene contenido √∫til
                    content = article.get('content', '')
                    if content and len(content) > 50:
                        print(f"   üìñ Contenido: {content[:100]}...")
                    else:
                        print(f"   ‚ö†Ô∏è  Contenido limitado o ausente")
                
                all_articles.extend(articles)
                
            else:
                print(f"‚ùå Error {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Error en consulta {i}: {e}")
    
    print(f"\nüìä RESUMEN:")
    print(f"Total de art√≠culos obtenidos: {len(all_articles)}")
    
    # Analizar calidad de los art√≠culos
    with_content = sum(1 for a in all_articles if a.get('content') and len(a.get('content', '')) > 100)
    with_description = sum(1 for a in all_articles if a.get('description') and len(a.get('description', '')) > 50)
    
    print(f"Con contenido sustancial: {with_content}")
    print(f"Con descripci√≥n buena: {with_description}")
    
    return all_articles

def test_classification_on_real_articles():
    """Probar la clasificaci√≥n en art√≠culos reales"""
    
    from openai import OpenAI
    
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    
    print("\nüß™ PROBANDO CLASIFICACI√ìN EN ART√çCULOS REALES")
    print("=" * 60)
    
    articles = fetch_real_news()
    
    if not articles:
        print("‚ùå No se obtuvieron art√≠culos para probar")
        return
    
    # Probar clasificaci√≥n en los primeros 5 art√≠culos
    for i, article in enumerate(articles[:5], 1):
        print(f"\nüî¨ PROBANDO ART√çCULO {i}:")
        print(f"üì∞ T√≠tulo: {article.get('title', 'Sin t√≠tulo')}")
        print(f"üìù Descripci√≥n: {article.get('description', 'Sin descripci√≥n')}")
        
        # Usar el mismo prompt que el agente
        title = article.get('title', '')
        description = article.get('description', '')
        content = article.get('content', '')
        
        if not title or not description:
            print("‚ö†Ô∏è  Art√≠culo sin t√≠tulo o descripci√≥n - SALTANDO")
            continue
        
        prompt = f"""Analiza este art√≠culo de noticias y clasif√≠calo en una de estas categor√≠as:

- "ai": Si el art√≠culo habla principalmente sobre inteligencia artificial, machine learning, automatizaci√≥n, robots, o tecnolog√≠a AI
- "marketing": Si el art√≠culo habla principalmente sobre publicidad, marketing digital, redes sociales, branding, o estrategias comerciales  
- "both": Si el art√≠culo combina ambos temas (AI aplicada al marketing, herramientas de marketing con IA, etc.)
- "none": Si no se relaciona con ninguna de las categor√≠as anteriores

T√≠tulo: {title}
Descripci√≥n: {description}
Contenido: {content}

Responde √∫nicamente con una palabra: ai, marketing, both, o none"""

        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Eres un clasificador de noticias experto. Debes responder √∫nicamente con una palabra."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=10
            )
            
            result = response.choices[0].message.content.strip().lower()
            print(f"ü§ñ CLASIFICACI√ìN: '{result}'")
            
            if result in ["ai", "marketing", "both"]:
                print("‚úÖ ART√çCULO RELEVANTE")
            else:
                print("‚ùå ART√çCULO NO RELEVANTE")
                
        except Exception as e:
            print(f"‚ùå Error al clasificar: {e}")

if __name__ == "__main__":
    print("üöÄ INICIANDO DEBUG DE NEWSAPI + LLM")
    
    # Verificar API keys
    if not os.getenv("NEWS_API_KEY"):
        print("‚ùå NEWS_API_KEY no encontrada")
        exit(1)
    
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY no encontrada")
        exit(1)
    
    print("‚úÖ API Keys encontradas")
    
    # Probar clasificaci√≥n en art√≠culos reales
    test_classification_on_real_articles()
    
    print("\nüèÅ DEBUG COMPLETADO")
